/*
 * Fava - OpenApi Gateway - DNS
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gopinto

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type ZoneApi interface {

	/*
	 * ApiDnsZoneDelete Deletes a DNS zone from the passed provider
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return ApiApiDnsZoneDeleteRequest
	 */
	ApiDnsZoneDelete(ctx _context.Context) ApiApiDnsZoneDeleteRequest

	/*
	 * ApiDnsZoneDeleteExecute executes the request
	 */
	ApiDnsZoneDeleteExecute(r ApiApiDnsZoneDeleteRequest) (*_nethttp.Response, GenericOpenAPIError)

	/*
	 * ApiDnsZoneGet Retrieves the DNS zones assigned to the account
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return ApiApiDnsZoneGetRequest
	 */
	ApiDnsZoneGet(ctx _context.Context) ApiApiDnsZoneGetRequest

	/*
	 * ApiDnsZoneGetExecute executes the request
	 * @return []Zone
	 */
	ApiDnsZoneGetExecute(r ApiApiDnsZoneGetRequest) ([]Zone, *_nethttp.Response, GenericOpenAPIError)

	/*
	 * ApiDnsZonePost Creates a new DNS zone
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return ApiApiDnsZonePostRequest
	 */
	ApiDnsZonePost(ctx _context.Context) ApiApiDnsZonePostRequest

	/*
	 * ApiDnsZonePostExecute executes the request
	 * @return Zone
	 */
	ApiDnsZonePostExecute(r ApiApiDnsZonePostRequest) (Zone, *_nethttp.Response, GenericOpenAPIError)

	/*
	 * ApiDnsZoneZoneGet Loads the specified DNS zone
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param zone The name of the zone to query.
	 * @return ApiApiDnsZoneZoneGetRequest
	 */
	ApiDnsZoneZoneGet(ctx _context.Context, zone string) ApiApiDnsZoneZoneGetRequest

	/*
	 * ApiDnsZoneZoneGetExecute executes the request
	 * @return Zone
	 */
	ApiDnsZoneZoneGetExecute(r ApiApiDnsZoneZoneGetRequest) (Zone, *_nethttp.Response, GenericOpenAPIError)
}

// ZoneApiService ZoneApi service
type ZoneApiService service

type ApiApiDnsZoneDeleteRequest struct {
	ctx         _context.Context
	ApiService  ZoneApi
	name        *string
	xApiOptions *string
}

func (r ApiApiDnsZoneDeleteRequest) Name(name string) ApiApiDnsZoneDeleteRequest {
	r.name = &name
	return r
}
func (r ApiApiDnsZoneDeleteRequest) XApiOptions(xApiOptions string) ApiApiDnsZoneDeleteRequest {
	r.xApiOptions = &xApiOptions
	return r
}

func (r ApiApiDnsZoneDeleteRequest) Execute() (*_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.ApiDnsZoneDeleteExecute(r)
}

/*
 * ApiDnsZoneDelete Deletes a DNS zone from the passed provider
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiApiDnsZoneDeleteRequest
 */
func (a *ZoneApiService) ApiDnsZoneDelete(ctx _context.Context) ApiApiDnsZoneDeleteRequest {
	return ApiApiDnsZoneDeleteRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *ZoneApiService) ApiDnsZoneDeleteExecute(r ApiApiDnsZoneDeleteRequest) (*_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZoneApiService.ApiDnsZoneDelete")
	if err != nil {
		executionError.error = err.Error()
		return nil, executionError
	}

	localVarPath := localBasePath + "/api/dns/Zone"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.name == nil {
		executionError.error = "name is required and must be specified"
		return nil, executionError
	}
	if r.xApiOptions == nil {
		executionError.error = "xApiOptions is required and must be specified"
		return nil, executionError
	}

	localVarQueryParams.Add("Name", parameterToString(*r.name, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["x-api-options"] = parameterToString(*r.xApiOptions, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, executionError
}

type ApiApiDnsZoneGetRequest struct {
	ctx         _context.Context
	ApiService  ZoneApi
	xApiOptions *string
}

func (r ApiApiDnsZoneGetRequest) XApiOptions(xApiOptions string) ApiApiDnsZoneGetRequest {
	r.xApiOptions = &xApiOptions
	return r
}

func (r ApiApiDnsZoneGetRequest) Execute() ([]Zone, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.ApiDnsZoneGetExecute(r)
}

/*
 * ApiDnsZoneGet Retrieves the DNS zones assigned to the account
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiApiDnsZoneGetRequest
 */
func (a *ZoneApiService) ApiDnsZoneGet(ctx _context.Context) ApiApiDnsZoneGetRequest {
	return ApiApiDnsZoneGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return []Zone
 */
func (a *ZoneApiService) ApiDnsZoneGetExecute(r ApiApiDnsZoneGetRequest) ([]Zone, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  []Zone
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZoneApiService.ApiDnsZoneGet")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/api/dns/Zone"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xApiOptions == nil {
		executionError.error = "xApiOptions is required and must be specified"
		return localVarReturnValue, nil, executionError
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["x-api-options"] = parameterToString(*r.xApiOptions, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}

type ApiApiDnsZonePostRequest struct {
	ctx                    _context.Context
	ApiService             ZoneApi
	xApiOptions            *string
	createZoneRequestModel *CreateZoneRequestModel
}

func (r ApiApiDnsZonePostRequest) XApiOptions(xApiOptions string) ApiApiDnsZonePostRequest {
	r.xApiOptions = &xApiOptions
	return r
}
func (r ApiApiDnsZonePostRequest) CreateZoneRequestModel(createZoneRequestModel CreateZoneRequestModel) ApiApiDnsZonePostRequest {
	r.createZoneRequestModel = &createZoneRequestModel
	return r
}

func (r ApiApiDnsZonePostRequest) Execute() (Zone, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.ApiDnsZonePostExecute(r)
}

/*
 * ApiDnsZonePost Creates a new DNS zone
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiApiDnsZonePostRequest
 */
func (a *ZoneApiService) ApiDnsZonePost(ctx _context.Context) ApiApiDnsZonePostRequest {
	return ApiApiDnsZonePostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return Zone
 */
func (a *ZoneApiService) ApiDnsZonePostExecute(r ApiApiDnsZonePostRequest) (Zone, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  Zone
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZoneApiService.ApiDnsZonePost")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/api/dns/Zone"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xApiOptions == nil {
		executionError.error = "xApiOptions is required and must be specified"
		return localVarReturnValue, nil, executionError
	}
	if r.createZoneRequestModel == nil {
		executionError.error = "createZoneRequestModel is required and must be specified"
		return localVarReturnValue, nil, executionError
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["x-api-options"] = parameterToString(*r.xApiOptions, "")
	// body params
	localVarPostBody = r.createZoneRequestModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}

type ApiApiDnsZoneZoneGetRequest struct {
	ctx         _context.Context
	ApiService  ZoneApi
	zone        string
	xApiOptions *string
}

func (r ApiApiDnsZoneZoneGetRequest) XApiOptions(xApiOptions string) ApiApiDnsZoneZoneGetRequest {
	r.xApiOptions = &xApiOptions
	return r
}

func (r ApiApiDnsZoneZoneGetRequest) Execute() (Zone, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.ApiDnsZoneZoneGetExecute(r)
}

/*
 * ApiDnsZoneZoneGet Loads the specified DNS zone
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param zone The name of the zone to query.
 * @return ApiApiDnsZoneZoneGetRequest
 */
func (a *ZoneApiService) ApiDnsZoneZoneGet(ctx _context.Context, zone string) ApiApiDnsZoneZoneGetRequest {
	return ApiApiDnsZoneZoneGetRequest{
		ApiService: a,
		ctx:        ctx,
		zone:       zone,
	}
}

/*
 * Execute executes the request
 * @return Zone
 */
func (a *ZoneApiService) ApiDnsZoneZoneGetExecute(r ApiApiDnsZoneZoneGetRequest) (Zone, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  Zone
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZoneApiService.ApiDnsZoneZoneGet")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/api/dns/Zone/{zone}"
	localVarPath = strings.Replace(localVarPath, "{"+"zone"+"}", _neturl.PathEscape(parameterToString(r.zone, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xApiOptions == nil {
		executionError.error = "xApiOptions is required and must be specified"
		return localVarReturnValue, nil, executionError
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["x-api-options"] = parameterToString(*r.xApiOptions, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}
