/*
 * Fava - OpenApi Gateway - DNS
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gopinto

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

type RecordApi interface {

	/*
	 * ApiDnsRecordDelete Deletes records which match the specified criterias
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return ApiApiDnsRecordDeleteRequest
	 */
	ApiDnsRecordDelete(ctx _context.Context) ApiApiDnsRecordDeleteRequest

	/*
	 * ApiDnsRecordDeleteExecute executes the request
	 */
	ApiDnsRecordDeleteExecute(r ApiApiDnsRecordDeleteRequest) (*_nethttp.Response, GenericOpenAPIError)

	/*
	 * ApiDnsRecordGet Retrieves the DNS zone's resource records
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return ApiApiDnsRecordGetRequest
	 */
	ApiDnsRecordGet(ctx _context.Context) ApiApiDnsRecordGetRequest

	/*
	 * ApiDnsRecordGetExecute executes the request
	 * @return []Record
	 */
	ApiDnsRecordGetExecute(r ApiApiDnsRecordGetRequest) ([]Record, *_nethttp.Response, GenericOpenAPIError)

	/*
	 * ApiDnsRecordPost Creates a new DNS resource record
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return ApiApiDnsRecordPostRequest
	 */
	ApiDnsRecordPost(ctx _context.Context) ApiApiDnsRecordPostRequest

	/*
	 * ApiDnsRecordPostExecute executes the request
	 * @return Record
	 */
	ApiDnsRecordPostExecute(r ApiApiDnsRecordPostRequest) (Record, *_nethttp.Response, GenericOpenAPIError)
}

// RecordApiService RecordApi service
type RecordApiService service

type ApiApiDnsRecordDeleteRequest struct {
	ctx         _context.Context
	ApiService  RecordApi
	zone        *string
	recordType  *RecordType
	name        *string
	xApiOptions *string
}

func (r ApiApiDnsRecordDeleteRequest) Zone(zone string) ApiApiDnsRecordDeleteRequest {
	r.zone = &zone
	return r
}
func (r ApiApiDnsRecordDeleteRequest) RecordType(recordType RecordType) ApiApiDnsRecordDeleteRequest {
	r.recordType = &recordType
	return r
}
func (r ApiApiDnsRecordDeleteRequest) Name(name string) ApiApiDnsRecordDeleteRequest {
	r.name = &name
	return r
}
func (r ApiApiDnsRecordDeleteRequest) XApiOptions(xApiOptions string) ApiApiDnsRecordDeleteRequest {
	r.xApiOptions = &xApiOptions
	return r
}

func (r ApiApiDnsRecordDeleteRequest) Execute() (*_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.ApiDnsRecordDeleteExecute(r)
}

/*
 * ApiDnsRecordDelete Deletes records which match the specified criterias
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiApiDnsRecordDeleteRequest
 */
func (a *RecordApiService) ApiDnsRecordDelete(ctx _context.Context) ApiApiDnsRecordDeleteRequest {
	return ApiApiDnsRecordDeleteRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *RecordApiService) ApiDnsRecordDeleteExecute(r ApiApiDnsRecordDeleteRequest) (*_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecordApiService.ApiDnsRecordDelete")
	if err != nil {
		executionError.error = err.Error()
		return nil, executionError
	}

	localVarPath := localBasePath + "/api/dns/Record"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.zone == nil {
		executionError.error = "zone is required and must be specified"
		return nil, executionError
	}
	if r.recordType == nil {
		executionError.error = "recordType is required and must be specified"
		return nil, executionError
	}
	if r.name == nil {
		executionError.error = "name is required and must be specified"
		return nil, executionError
	}
	if r.xApiOptions == nil {
		executionError.error = "xApiOptions is required and must be specified"
		return nil, executionError
	}

	localVarQueryParams.Add("Zone", parameterToString(*r.zone, ""))
	localVarQueryParams.Add("RecordType", parameterToString(*r.recordType, ""))
	localVarQueryParams.Add("Name", parameterToString(*r.name, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["x-api-options"] = parameterToString(*r.xApiOptions, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, executionError
}

type ApiApiDnsRecordGetRequest struct {
	ctx         _context.Context
	ApiService  RecordApi
	zone        *string
	xApiOptions *string
	recordType  *RecordType
	name        *string
}

func (r ApiApiDnsRecordGetRequest) Zone(zone string) ApiApiDnsRecordGetRequest {
	r.zone = &zone
	return r
}
func (r ApiApiDnsRecordGetRequest) XApiOptions(xApiOptions string) ApiApiDnsRecordGetRequest {
	r.xApiOptions = &xApiOptions
	return r
}
func (r ApiApiDnsRecordGetRequest) RecordType(recordType RecordType) ApiApiDnsRecordGetRequest {
	r.recordType = &recordType
	return r
}
func (r ApiApiDnsRecordGetRequest) Name(name string) ApiApiDnsRecordGetRequest {
	r.name = &name
	return r
}

func (r ApiApiDnsRecordGetRequest) Execute() ([]Record, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.ApiDnsRecordGetExecute(r)
}

/*
 * ApiDnsRecordGet Retrieves the DNS zone's resource records
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiApiDnsRecordGetRequest
 */
func (a *RecordApiService) ApiDnsRecordGet(ctx _context.Context) ApiApiDnsRecordGetRequest {
	return ApiApiDnsRecordGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return []Record
 */
func (a *RecordApiService) ApiDnsRecordGetExecute(r ApiApiDnsRecordGetRequest) ([]Record, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  []Record
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecordApiService.ApiDnsRecordGet")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/api/dns/Record"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.zone == nil {
		executionError.error = "zone is required and must be specified"
		return localVarReturnValue, nil, executionError
	}
	if r.xApiOptions == nil {
		executionError.error = "xApiOptions is required and must be specified"
		return localVarReturnValue, nil, executionError
	}

	localVarQueryParams.Add("Zone", parameterToString(*r.zone, ""))
	if r.recordType != nil {
		localVarQueryParams.Add("RecordType", parameterToString(*r.recordType, ""))
	}
	if r.name != nil {
		localVarQueryParams.Add("Name", parameterToString(*r.name, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["x-api-options"] = parameterToString(*r.xApiOptions, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}

type ApiApiDnsRecordPostRequest struct {
	ctx                      _context.Context
	ApiService               RecordApi
	xApiOptions              *string
	createRecordRequestModel *CreateRecordRequestModel
}

func (r ApiApiDnsRecordPostRequest) XApiOptions(xApiOptions string) ApiApiDnsRecordPostRequest {
	r.xApiOptions = &xApiOptions
	return r
}
func (r ApiApiDnsRecordPostRequest) CreateRecordRequestModel(createRecordRequestModel CreateRecordRequestModel) ApiApiDnsRecordPostRequest {
	r.createRecordRequestModel = &createRecordRequestModel
	return r
}

func (r ApiApiDnsRecordPostRequest) Execute() (Record, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.ApiDnsRecordPostExecute(r)
}

/*
 * ApiDnsRecordPost Creates a new DNS resource record
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiApiDnsRecordPostRequest
 */
func (a *RecordApiService) ApiDnsRecordPost(ctx _context.Context) ApiApiDnsRecordPostRequest {
	return ApiApiDnsRecordPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return Record
 */
func (a *RecordApiService) ApiDnsRecordPostExecute(r ApiApiDnsRecordPostRequest) (Record, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  Record
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecordApiService.ApiDnsRecordPost")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/api/dns/Record"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xApiOptions == nil {
		executionError.error = "xApiOptions is required and must be specified"
		return localVarReturnValue, nil, executionError
	}
	if r.createRecordRequestModel == nil {
		executionError.error = "createRecordRequestModel is required and must be specified"
		return localVarReturnValue, nil, executionError
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["x-api-options"] = parameterToString(*r.xApiOptions, "")
	// body params
	localVarPostBody = r.createRecordRequestModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}
